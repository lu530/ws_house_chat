server:
  port: 8080

spring:
  servlet:
    multipart:
      max-file-size: 200MB
      max-request-size: 200MB
  mail:
    host: smtp.qq.com
    username: xiaoerzzc@qq.com
    password: dqgkuvkfiuzoheac
    default-encoding: UTF-8
  profiles:
    active: dev
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    password: NLdj15
    url: jdbc:mysql://127.0.0.1:3306/ws-im-core?serverTimezone=UTC&allowPublicKeyRetrieval=true&useSSL=false&characterEncoding=UTF8
    username: root
  redis:
    host: 127.0.0.1
    port: 6379
    jedis:
      pool:
        max-active: 100
        max-idle: 100
        max-wait: 1000
        min-idle: 10
    password: 123456
    database: 0

  kafka:
    bootstrap-servers: localhost:9092 #这个是kafka的地址,对应你server.properties中配置的
    producer:
      batch-size: 16384 #批量大小
      acks: -1 #应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      retries: 10 # 消息发送重试次数
      #transaction-id-prefix: transaction
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        linger:
          ms: 2000 #提交延迟
          #partitioner: #指定分区器
          #class: pers.zhang.config.CustomerPartitionHandler
    consumer:
      group-id: testGroup #默认的消费组ID
      enable-auto-commit: true #是否自动提交offset
      auto-commit-interval: 2000 #提交offset延时
      # 当kafka中没有初始offset或offset超出范围时将自动重置offset
      # earliest:重置为分区中最小的offset;
      # latest:重置为分区中最新的offset(消费分区中新产生的数据);
      # none:只要有一个分区不存在已提交的offset,就抛出异常;
      auto-offset-reset: latest
      max-poll-records: 500 #单次拉取消息的最大条数
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        session:
          timeout:
            ms: 120000 # 消费会话超时时间（超过这个时间 consumer 没有发送心跳，就会触发 rebalance 操作）
        request:
          timeout:
            ms: 18000 # 消费请求的超时时间
    listener:
      missing-topics-fatal: false # consumer listener topics 不存在时，启动项目就会报错
      #      type: batch


#mybatis-plus:
      #  mapper-locations:
#    - classpath:mapper/**/*.xml
minio:
  endpoint: http://127.0.0.1:9000
  access-key: aOT231p6FCr4uPDhxDeu
  secret-key: sC2j6T91bZU5zZJww6YP2n8T8FQQl3Tt2nWqj4eF
  bucket-name: ws-house-chat-2023

netty:
  hostname: 10.11.18.41
  port: 7777


ko-time:
  # 需要监测的切面范围，参考aop的@pointcut 或者左侧常见问题
  pointcut: execution(public * cn.com.wanshi.chat..*.*(..))
  # 是否开启koTime，默认开启，当为false时，关闭koTimeq
  enable: true
  # 是否开启控制输出，默认false
  log-enable: false
  # 控制台输出语言（english/chinese）默认chinese
  log-language: chinese
  # 时间阈值，用于前端展示，大于阈值显示红色，小于阈值显示绿色，默认800
  threshold: 800.0
  # 前端页面调用接口的上下文环境，无法自动获取时可手动配置，一般情况切记不要配置   v2.0.1开始支持
  exception-enable: true
  # 是否开启认证，默认为false,开启后需要登录才能访问调用链路 v2.0.2开始支持
  auth-enable: true
  # 登录用户 v2.0.2开始支持
  user-name: admin
  # 登录密码 v2.0.2开始支持
  password: 123456
  # 是否开启入参组合分析 默认开启 v2.0.8开始支持 双击方法节点即可看到效果
  param-analyse: true
  # 调用信息存储线程数（为了不影响项目本身性能，链路存储异步进行），默认2，该值并非越大越好，瓶颈取决于数据库性能和服务器配置，尽可能少占用项目资源为上  v2.2.0-BETA开始支持
  thread-num: 2